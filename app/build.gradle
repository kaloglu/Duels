plugins {
    id "org.sonarqube" version "2.7"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    signingConfigs {
        firebaseBeta {
            keyAlias '.betakey'
            keyPassword '.betakey'
            storeFile file('/Users/kaloglu/projects/Duels/.betakey')
            storePassword '.betakey'
        }
    }
    compileSdkVersion app.compileSdk
    buildToolsVersion app.buildTools
    defaultConfig {
        applicationId "com.kaloglu.duels"

        minSdkVersion app.minSdk
        targetSdkVersion app.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        versionCode 1
        versionName "1.0.0"

    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        beta {
            ext.betaDistributionGroupAliases = "beta-android"
            ext.betaDistributionBetaNotesFilePath = file('../beta_release_notes.txt').absolutePath
        }
        betaDebug {
            debuggable true
            applicationIdSuffix ".debug"
        }
    }

    compileOptions {
        sourceCompatibility java.sourceCompatibility
        targetCompatibility java.targetCompatibility
    }

    flavorDimensions 'default'
    productFlavors {
        firebase {
            dimension 'default'
            buildConfigField 'String', 'NETWORK_PROTOCOL', '"firebase"'
        }

    }
    sourceSets {
        main {
            res.srcDirs = getSourceDirectories('main')
        }

    }
}

dependencies {
    addDependencies(dependencies, appDependencies)
}

static def getSourceDirectories(dimensionName) {
    def directories = new ArrayList<>()
    def resRoot = 'src/' + dimensionName + '/res'
    directories.add(resRoot)
    def layoutsDir = new File('app/' + resRoot + '/layout')
    if (layoutsDir.exists()) {
        layoutsDir.eachDir {
            directories.add(it.canonicalPath)
            def fragmentsDir = new File(it.canonicalPath + '/fragments')
            if (fragmentsDir.exists()) {
                fragmentsDir.eachDir {
                    directories.add(it.canonicalPath)
                }
            }
        }
    }

    return directories
}

apply plugin: 'com.google.gms.google-services'
