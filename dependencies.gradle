// @see https://hackernoon.com/android-how-to-add-gradle-dependencies-using-foreach-c4cbcc070458

ext.app = [
        minSdk    : 21,
        targetSdk : 27,
        compileSdk: 27,
        buildTools: '28.0.3',
]

ext.repository = [
        jitpack: 'https://jitpack.io',
]

ext.addRepos = { RepositoryHandler handler ->
    handler.google()
    handler.jcenter()
    handler.maven { url repository.jitpack }
}

ext.java = [
        sourceCompatibility: JavaVersion.VERSION_1_8,
        targetCompatibility: JavaVersion.VERSION_1_8,
]

def versions = [
        googleServicesPlugin: '4.0.1',

        gradlePlugin        : '3.2.1',

        multidex            : '1.0.3',

        kotlin              : '1.3.10',

        supportLibrary      : '28.0.0',
        constraintLayout    : '1.1.2',

        dagger              : '2.16',

        javaxInject         : '1',

        room                : '1.1.1',
        lifeCycle           : '1.1.1',

        timber              : '4.5.1',

        firebase            : '16.0.5',

        firebaseAuth        : '4.2.1',

        // Test
        robolectric         : '3.4.2',
        junit               : '4.12',
        assertJ             : '3.8.0',
        mockitoKotlin       : '1.5.0',
]

def pluginLibs = [
        //Google Services Gradle Plugin
        google : "com.google.gms:google-services:$versions.googleServicesPlugin",

        // Android Gradle Plugin
        android: "com.android.tools.build:gradle:$versions.gradlePlugin",

        // Kotlin Gradle Plugin
        kotlin : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
]


ext.gradlePlugins = [
        android: pluginLibs.android,
        kotlin : pluginLibs.kotlin,
        google : pluginLibs.google,
]


def libraries = [
        // Multidex Support
        multidex           : "com.android.support:multidex:$versions.multidex",

        // Kotlin
        kotlin             : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin",
        kotlinReflect      : "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin",

        // Support Libraries
        appCompatV7        : "com.android.support:appcompat-v7:$versions.supportLibrary",
        supportDesign      : "com.android.support:design:$versions.supportLibrary",
        cardView           : "com.android.support:cardview-v7:$versions.supportLibrary",
        constraintLayout   : "com.android.support.constraint:constraint-layout:$versions.constraintLayout",
        supportV4          : "com.android.support:support-v4:$versions.supportLibrary",
        recylerView        : "com.android.support:recyclerview-v7:$versions.supportLibrary",

        // Dagger
        dagger             : "com.google.dagger:dagger:$versions.dagger",
        daggerSupport      : "com.google.dagger:dagger-android-support:$versions.dagger",
        daggerCompiler     : "com.google.dagger:dagger-compiler:$versions.dagger",
        daggerProcessor    : "com.google.dagger:dagger-android-processor:$versions.dagger",

        javaxInject        : "javax.inject:javax.inject:$versions.javaxInject",

        roomRuntime        : "android.arch.persistence.room:runtime:$versions.room",
        roomCompiler       : "android.arch.persistence.room:compiler:$versions.room",
        roomTesting        : "android.arch.persistence.room:testing:$versions.room",

        lifecycleRuntime   : "android.arch.lifecycle:runtime:$versions.lifeCycle",
        lifeCycleExtensions: "android.arch.lifecycle:extensions:$versions.lifeCycle",
        lifeCycleCompiler  : "android.arch.lifecycle:compiler:$versions.lifeCycle",

        timber             : "com.jakewharton.timber:timber:$versions.timber",

        firebaseCore       : "com.google.firebase:firebase-core:$versions.firebase",
        firebaseAuth       : "com.firebaseui:firebase-ui-auth:$versions.firebaseAuth",

        //Test
        assertj            : "org.assertj:assertj-core:$versions.assertJ",
        junit              : "junit:junit:$versions.junit",
        junitKotlin        : "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin",
        mockito            : "com.nhaarman:mockito-kotlin:$versions.mockitoKotlin",
        robolectric        : "org.robolectric:robolectric:$versions.robolectric",
        archTesting        : "android.arch.core:core-testing:$versions.archComp",
]

ext.appDependencies = [
        addDependency('implementation', libraries.multidex),

        addDependency('implementation', libraries.kotlin),

        addDependency('implementation', libraries.appCompatV7),
        addDependency('implementation', libraries.supportDesign),
        addDependency('implementation', libraries.recylerView),
        addDependency('implementation', libraries.supportV4),
        addDependency('implementation', libraries.cardView),
        addDependency('implementation', libraries.constraintLayout),

        addDependency('implementation', libraries.dagger),
        addDependency('implementation', libraries.daggerSupport),
        addDependency('kapt', libraries.daggerCompiler),
        addDependency('kapt', libraries.daggerProcessor),

        addDependency('testImplementation', libraries.junit),

        addDependency('implementation', libraries.roomRuntime),
        addDependency('kapt', libraries.roomCompiler),

        addDependency('implementation', libraries.lifecycleRuntime),
        addDependency('implementation', libraries.lifeCycleExtensions),
        addDependency('kapt', libraries.lifeCycleCompiler),

        addDependency('implementation', libraries.timber),

        addDependency('implementation', libraries.firebaseCore),
        addDependency('implementation', libraries.firebaseAuth),

        //TODO: kullanÄ±lmazsa silinecek
        addDependency('implementation', libraries.javaxInject),

        addDependency('testImplementation', libraries.roomTesting),
        addDependency('testImplementation', libraries.assertj),
        addDependency('testImplementation', libraries.junitKotlin),
        addDependency('testImplementation', libraries.mockito),

        //test debug for room
        addDependency('debugImplementation', 'com.amitshekhar.android:debug-db:1.0.4'),
]

static def addDependency(config, dependency) {
    [configuration: config, dependency: dependency]
}

ext.addDependencies = { DependencyHandler handler, dependencies ->
    dependencies.each {
        if (it.options != null) {
            handler.add(it.configuration, it.dependency, it.options)
        } else {
            handler.add(it.configuration, it.dependency)
        }

    }
}
